--- 1/DebugStub.Mod.txt
+++ 2/DebugStub.Mod.txt
@@ -1,5 +1,5 @@
 MODULE DebugStub;
-  IMPORT SYSTEM;
+  IMPORT SYSTEM, Kernel;
 
   TYPE
 
@@ -89,6 +89,7 @@
     context.stoppedBy.handler();
     context.stoppedBy := NIL;
     RestoreFlags(context.flags, context.regH, context.regPC, stub.buffer1, stub.buffer2);
+    Kernel.InvalidateCodeCache(SYSTEM.ADR(stub.buffer1));
   END StubHandler;
 
   PROCEDURE InitBreakpoint*(bp: Breakpoint; h: BreakpointHandler);
@@ -111,6 +112,7 @@
     bp.enabled := TRUE;
     SYSTEM.GET(bp.pc, bp.pcValue);
     SYSTEM.PUT(bp.pc, 0E7000000H + ((SYSTEM.ADR(bp.trampoline[0]) - bp.pc) DIV 4 - 1) MOD 1000000H);
+    Kernel.InvalidateCodeCache(bp.pc);
   END EnableBreakpoint;
 
   PROCEDURE DisableBreakpoint*(bp: Breakpoint);
@@ -121,6 +123,7 @@
       ASSERT(oldPC = 0E7000000H + ((SYSTEM.ADR(bp.trampoline[0]) - bp.pc) DIV 4 - 1) MOD 1000000H);
       SYSTEM.PUT(bp.pc, bp.pcValue);
       bp.enabled := FALSE;
+      Kernel.InvalidateCodeCache(bp.pc);
     END
   END DisableBreakpoint;
 
@@ -208,6 +211,7 @@
   BEGIN
     stub.prolog[0] := 00A000009H; (* MOV  R10, R9 *)
     stub.prolog[1] := 0C700000FH; (* BC   LNK     *)
+    Kernel.InvalidateCodeCache(SYSTEM.ADR(stub.prolog[0]));
     h := SYSTEM.VAL(BreakpointHandler, SYSTEM.ADR(stub.prolog[0]));
     SYSTEM.LDREG(9, SYSTEM.ADR(context)); (* SYSTEM.LDREG 10 would throw assertion *)
     h();
@@ -221,6 +225,7 @@
     FOR i := 0 TO 15 DO
       stub.restoreRegs[i] := 080A00000H +  1000004H * i (* LDR  Ri,  [R10 + i * 4] *)
     END
+    ;Kernel.InvalidateCodeCache(SYSTEM.ADR(stub.prolog[0]));
   END Init;
 
 BEGIN Init
--- 1/DebugStubTest.Mod.txt
+++ 2/DebugStubTest.Mod.txt
@@ -1,5 +1,5 @@
 MODULE DebugStubTest;
-  IMPORT SYSTEM, DebugStub;
+  IMPORT SYSTEM, Kernel, DebugStub;
 
   TYPE
 
@@ -24,6 +24,7 @@
     FOR i := 0 TO 11 DO
       f := i * 10000000H + (SYSTEM.H(1) MOD 10000H);
       DebugStub.RestoreFlags(f, 99999, SYSTEM.ADR(ta.epilog[0]), ta.buffer1, ta.buffer2);
+      Kernel.InvalidateCodeCache(SYSTEM.ADR(ta.buffer1));
       rfh(ff, hh);
       ASSERT(hh = 99999);
       ASSERT(f = ff);
@@ -90,5 +91,6 @@
   ta.epilog[7] := 04EE8000CH; (* ADD  SP,  SP, 12     *)
   ta.epilog[8] := 0C700000FH; (* B    LNK             *)
 
+  Kernel.InvalidateCodeCache(SYSTEM.ADR(ta.epilog[0]));
   takenBreakpoint := NIL; notTakenBreakpoint := NIL; ledValue := 0;
 END DebugStubTest.
