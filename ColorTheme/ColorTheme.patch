--- 1/Oberon.Mod.txt
+++ 2/Oberon.Mod.txt
@@ -62,6 +62,9 @@
 
     CurFnt*: Fonts.Font;
     CurCol*, CurOff*: INTEGER;
+    BackgroundColor*, TextBackgroundColor*, FrameColor*, CursorColor*, ScrollMarkColor*,
+    ChangeMarkColor*, SelectionColor*, MenuBackgroundColor*, ScrollBarColor*, UnderlineColor*: INTEGER;
+    MixTextColors*: BOOLEAN;
     NofTasks*: INTEGER;
 
     CurTask: Task;
@@ -109,7 +112,7 @@
       IF X > CL + DW - 15 THEN X := CL + DW - 15 END
     END;
     IF Y < 14 THEN Y := 14 ELSIF Y > DH THEN Y := DH END;
-    Display.CopyPattern(Display.white, Display.arrow, X, Y - 14, Display.invert)
+    Display.CopyPattern(CursorColor, Display.arrow, X, Y - 14, Display.invert)
   END FlipArrow;
      
   PROCEDURE FlipStar (X, Y: INTEGER);
@@ -120,7 +123,7 @@
       IF X < CL + 7 THEN X := CL + 7 ELSIF X > CL + DW - 8 THEN X := CL + DW - 8 END
     END ;
     IF Y < 7 THEN Y := 7 ELSIF Y > DH - 8 THEN Y := DH - 8 END;
-    Display.CopyPattern(Display.white, Display.star, X - 7, Y - 7, Display.invert)
+    Display.CopyPattern(CursorColor, Display.star, X - 7, Y - 7, Display.invert)
   END FlipStar;
 
   PROCEDURE OpenCursor(VAR c: Cursor);
@@ -177,10 +180,10 @@
     Viewers.ViewerMsg:
       IF (M.id = Viewers.restore) & (V.W > 0) & (V.H > 0) THEN
         RemoveMarks(V.X, V.Y, V.W, V.H);
-        Display.ReplConst(Display.black, V.X, V.Y, V.W, V.H, Display.replace)
+        Display.ReplConst(BackgroundColor, V.X, V.Y, V.W, V.H, Display.replace)
       ELSIF (M.id = Viewers.modify) & (M.Y < V.Y) THEN
         RemoveMarks(V.X, M.Y, V.W, V.Y - M.Y);
-        Display.ReplConst(Display.black, V.X, M.Y, V.W, V.Y - M.Y, Display.replace)
+        Display.ReplConst(BackgroundColor, V.X, M.Y, V.W, V.Y - M.Y, Display.replace)
       END
     END
   END HandleFiller;
@@ -189,7 +192,7 @@
     VAR Filler: Viewers.Viewer;
   BEGIN
      Input.SetMouseLimits(Viewers.curW + UW + SW, H);
-     Display.ReplConst(Display.black, Viewers.curW, 0, UW + SW, H, Display.replace);
+     Display.ReplConst(BackgroundColor, Viewers.curW, 0, UW + SW, H, Display.replace);
      NEW(Filler); Filler.handle := HandleFiller;
      Viewers.InitTrack(UW, H, Filler); (*init user track*)
      NEW(Filler); Filler.handle := HandleFiller;
@@ -353,6 +356,26 @@
   BEGIN CurCol := col
   END SetColor;
 
+  PROCEDURE SetColorTheme* (mix: BOOLEAN; fc, bc, mbc, tbc, smc, sbc, cc, cmc, sc, uc: INTEGER);
+     VAR  M: Viewers.ViewerMsg;
+  BEGIN
+    M.id := Viewers.suspend;
+    Viewers.Broadcast(M);
+    MixTextColors := mix;
+    FrameColor := fc;
+    BackgroundColor := bc;
+    MenuBackgroundColor := mbc;
+    TextBackgroundColor := tbc;
+    ScrollMarkColor := smc;
+    ScrollBarColor := sbc;
+    CursorColor := cc;
+    ChangeMarkColor := cmc;
+    SelectionColor := sc;
+    UnderlineColor := uc;
+    M.id := Viewers.restore;
+    Viewers.Broadcast(M);
+  END SetColorTheme;
+
   PROCEDURE SetOffset* (voff: INTEGER);
   BEGIN CurOff := voff
   END SetOffset;
@@ -397,6 +420,14 @@
   END Reset;
 
 BEGIN User[0] := 0X;
+
+  BackgroundColor := Display.black; FrameColor := Display.white;
+  CursorColor := Display.white; ScrollMarkColor := Display.white; ChangeMarkColor := Display.white;
+  SelectionColor := Display.white; MenuBackgroundColor := Display.white;
+  ScrollBarColor := Display.white; UnderlineColor := Display.white;
+  TextBackgroundColor := Display.black;
+  MixTextColors := FALSE;
+
   Arrow.Fade := FlipArrow; Arrow.Draw := FlipArrow;
   Star.Fade := FlipStar; Star.Draw := FlipStar;
   OpenCursor(Mouse); OpenCursor(Pointer);
--- 1/MenuViewers.Mod.txt
+++ 1/MenuViewers.Mod.txt
@@ -1,7 +1,7 @@
 MODULE MenuViewers; (*JG 26.8.90 / 16.9.93 / NW 10.3.2013*)
   IMPORT Input, Display, Viewers, Oberon;
 
-  CONST extend* = 0; reduce* = 1; FrameColor = Display.white;
+  CONST extend* = 0; reduce* = 1;
 
   TYPE Viewer* = POINTER TO ViewerDesc;
 
@@ -24,10 +24,10 @@
 
   PROCEDURE Draw (V: Viewers.Viewer);
   BEGIN
-    Display.ReplConst(FrameColor, V.X, V.Y, 1, V.H, Display.replace);
-    Display.ReplConst(FrameColor, V.X + V.W - 1, V.Y, 1, V.H, Display.replace);
-    Display.ReplConst(FrameColor, V.X + 1, V.Y, V.W - 2, 1, Display.replace);
-    Display.ReplConst(FrameColor, V.X + 1, V.Y + V.H - 1, V.W - 2, 1, Display.replace)
+    Display.ReplConst(Oberon.FrameColor, V.X, V.Y, 1, V.H, Display.replace);
+    Display.ReplConst(Oberon.FrameColor, V.X + V.W - 1, V.Y, 1, V.H, Display.replace);
+    Display.ReplConst(Oberon.FrameColor, V.X + 1, V.Y, V.W - 2, 1, Display.replace);
+    Display.ReplConst(Oberon.FrameColor, V.X + 1, V.Y + V.H - 1, V.W - 2, 1, Display.replace)
   END Draw;
 
   PROCEDURE Extend (V: Viewer; newY: INTEGER);
@@ -35,28 +35,28 @@
   BEGIN dH := V.Y - newY;
     IF dH > 0 THEN
       Display.ReplConst(Display.black, V.X + 1, newY + 1, V.W - 2, dH, Display.replace);
-      Display.ReplConst(FrameColor, V.X, newY, 1, dH, Display.replace);
-      Display.ReplConst(FrameColor, V.X + V.W - 1, newY, 1, dH, Display.replace);
-      Display.ReplConst(FrameColor, V.X + 1, newY, V.W - 2, 1, Display.replace)
+      Display.ReplConst(Oberon.FrameColor, V.X, newY, 1, dH, Display.replace);
+      Display.ReplConst(Oberon.FrameColor, V.X + V.W - 1, newY, 1, dH, Display.replace);
+      Display.ReplConst(Oberon.FrameColor, V.X + 1, newY, V.W - 2, 1, Display.replace)
     END
   END Extend;
 
   PROCEDURE Reduce (V: Viewer; newY: INTEGER);
-  BEGIN Display.ReplConst(FrameColor, V.X + 1, newY, V.W - 2, 1, Display.replace)
+  BEGIN Display.ReplConst(Oberon.FrameColor, V.X + 1, newY, V.W - 2, 1, Display.replace)
   END Reduce;
 
   PROCEDURE Grow (V: Viewer; oldH: INTEGER);
     VAR dH: INTEGER;
   BEGIN dH := V.H - oldH;
     IF dH > 0 THEN
-      Display.ReplConst(FrameColor, V.X, V.Y + oldH, 1, dH, Display.replace);
-      Display.ReplConst(FrameColor, V.X + V.W - 1, V.Y + oldH, 1, dH, Display.replace);
-      Display.ReplConst(FrameColor, V.X + 1, V.Y + V.H - 1, V.W - 2, 1, Display.replace)
+      Display.ReplConst(Oberon.FrameColor, V.X, V.Y + oldH, 1, dH, Display.replace);
+      Display.ReplConst(Oberon.FrameColor, V.X + V.W - 1, V.Y + oldH, 1, dH, Display.replace);
+      Display.ReplConst(Oberon.FrameColor, V.X + 1, V.Y + V.H - 1, V.W - 2, 1, Display.replace)
     END
   END Grow;
 
   PROCEDURE Shrink (V: Viewer; newH: INTEGER);
-  BEGIN Display.ReplConst(FrameColor, V.X + 1, V.Y + newH - 1, V.W - 2, 1, Display.replace)
+  BEGIN Display.ReplConst(Oberon.FrameColor, V.X + 1, V.Y + newH - 1, V.W - 2, 1, Display.replace)
   END Shrink;
 
   PROCEDURE Adjust (F: Display.Frame; id, dY, Y, H: INTEGER);
--- 1/TextFrames.Mod.txt
+++ 2/TextFrames.Mod.txt
@@ -66,6 +66,14 @@
     END
   END ReplConst;
 
+  PROCEDURE FrameColor(col: INTEGER): INTEGER;
+  BEGIN
+    IF col = -1 THEN col := Oberon.TextBackgroundColor
+    ELSIF col = -2 THEN col := Oberon.MenuBackgroundColor
+    END
+  RETURN col
+  END FrameColor;
+
   PROCEDURE FlipSM(X, Y: INTEGER);
     VAR DW, DH, CL: INTEGER;
   BEGIN DW := Display.Width; DH := Display.Height; CL := DW;
@@ -75,23 +83,23 @@
       IF X < CL + 3 THEN X := CL + 4 ELSIF X > CL + DW - 4 THEN X := CL + DW - 4 END
     END ;
     IF Y < 7 THEN Y := 7 ELSIF Y > DH - 7 THEN Y := DH - 7 END;
-    Display.CopyPattern(Display.white, Display.updown, X-4, Y-7, Display.invert)
+    Display.CopyPattern(Oberon.CursorColor, Display.updown, X-4, Y-7, Display.invert)
   END FlipSM;
 
   PROCEDURE UpdateMark (F: Frame);  (*in scroll bar*)
     VAR oldH: INTEGER;
   BEGIN oldH := F.markH; F.markH := F.org * F.H DIV (F.text.len + 1);
     IF F.hasMark & (F.left >= barW) & (F.markH # oldH) THEN
-      Display.ReplConst(Display.white, F.X + 1, F.Y + F.H - 1 - oldH, markW, 1, Display.invert);
-      Display.ReplConst(Display.white, F.X + 1, F.Y + F.H - 1 - F.markH, markW, 1, Display.invert)
+      Display.ReplConst(Oberon.ScrollMarkColor, F.X + 1, F.Y + F.H - 1 - oldH, markW, 1, Display.invert);
+      Display.ReplConst(Oberon.ScrollMarkColor, F.X + 1, F.Y + F.H - 1 - F.markH, markW, 1, Display.invert)
     END
   END UpdateMark;
 
   PROCEDURE SetChangeMark (F: Frame; on: BOOLEAN);  (*in corner*)
   BEGIN
     IF F.H > menuH THEN
-      IF on THEN  Display.CopyPattern(Display.white, Display.block, F.X+F.W-12, F.Y+F.H-12, Display.paint)
-      ELSE Display.ReplConst(F.col, F.X+F.W-12, F.Y+F.H-12, 8, 8, Display.replace)
+      IF on THEN  Display.CopyPattern(Oberon.ChangeMarkColor, Display.block, F.X+F.W-12, F.Y+F.H-12, Display.paint)
+      ELSE Display.ReplConst(FrameColor(F.col), F.X+F.W-12, F.Y+F.H-12, 8, 8, Display.replace)
       END
     END
   END SetChangeMark;
@@ -114,6 +122,9 @@
       Fonts.GetPat(R.fnt, nextCh, dx, x, y, w, h, patadr);
       IF (X + x + w <= NX) & (h # 0) THEN
         Display.CopyPattern(R.col, patadr, X + x, Y + y, Display.invert)
+        ;IF Oberon.MixTextColors & (R.col # 0) THEN
+          Display.CopyPattern(FrameColor(F.col), patadr, X + x, Y + y, Display.invert)
+        END;
       END;
       X := X + dx; INC(len); Texts.Read(R, nextCh)
     END;
@@ -135,16 +146,16 @@
   PROCEDURE Mark* (F: Frame; on: BOOLEAN);
   BEGIN
     IF (F.H > 0) & (F.left >= barW) & ((F.hasMark & ~on) OR (~F.hasMark & on)) THEN
-      Display.ReplConst(Display.white, F.X + 1, F.Y + F.H - 1 - F.markH, markW, 1, Display.invert)
+      Display.ReplConst(Oberon.ScrollMarkColor, F.X + 1, F.Y + F.H - 1 - F.markH, markW, 1, Display.invert)
     END;
     F.hasMark := on
   END Mark;
 
   PROCEDURE Restore* (F: Frame);
     VAR R: Texts.Reader; L, l: Line; curY, botY: INTEGER;
-  BEGIN  Display.ReplConst(F.col, F.X, F.Y, F.W, F.H, Display.replace);
+  BEGIN  Display.ReplConst(FrameColor(F.col), F.X, F.Y, F.W, F.H, Display.replace);
     IF F.left >= barW THEN
-      Display.ReplConst(Display.white, F.X + barW - 1, F.Y, 1, F.H, Display.invert)
+      Display.ReplConst(Oberon.ScrollBarColor, F.X + barW - 1, F.Y, 1, F.H, Display.invert)
     END;
     Validate(F.text, F.org);
     botY := F.Y + F.bot + dsr;
@@ -166,9 +177,9 @@
   PROCEDURE Extend* (F: Frame; newY: INTEGER);
     VAR R: Texts.Reader; L, l: Line;
     org: LONGINT; curY, botY: INTEGER;
-  BEGIN Display.ReplConst(F.col, F.X, newY, F.W, F.Y - newY, Display.replace);
+  BEGIN Display.ReplConst(FrameColor(F.col), F.X, newY, F.W, F.Y - newY, Display.replace);
     IF F.left >= barW THEN
-      Display.ReplConst(Display.white, F.X + barW - 1, newY, 1, F.Y - newY, Display.invert)
+      Display.ReplConst(Oberon.ScrollBarColor, F.X + barW - 1, newY, 1, F.Y - newY, Display.invert)
     END;
     botY := F.Y + F.bot + dsr; F.H := F.H + F.Y - newY; F.Y := newY;
     IF F.trailer.next = F.trailer THEN Validate(F.text, F.org) END;
@@ -197,7 +208,7 @@
     END;
     L.next := F.trailer;
     IF curY + asr > F.Y THEN
-      Display.ReplConst(F.col, F.X + F.left, F.Y, F.W - F.left, curY + asr - F.Y, Display.replace)
+      Display.ReplConst(FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, curY + asr - F.Y, Display.replace)
     END;
     F.markH := F.org * F.H DIV (F.text.len + 1); Mark(F, TRUE)
   END Reduce;
@@ -209,7 +220,7 @@
     IF F.trailer.next # F.trailer THEN
       Validate(F.text, pos);
       IF pos < F.org THEN Mark(F, FALSE);
-        Display.ReplConst(F.col, F.X + F.left, F.Y, F.W - F.left, F.H, Display.replace);
+        Display.ReplConst(FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, F.H, Display.replace);
         botY := F.Y; F.Y := F.Y + F.H; F.H := 0;
         F.org := pos; F.trailer.next := F.trailer; Extend(F, botY); Mark(F, TRUE)
       ELSIF pos > F.org THEN
@@ -225,7 +236,7 @@
           Display.CopyBlock (F.X + F.left, curY - dsr, F.W - F.left, Y0 + asr - (curY - dsr),
               F.X + F.left, curY - dsr + F.Y + F.H - F.top - asr - Y0, 0);
           curY := curY + F.Y + F.H - F.top - asr - Y0;
-          Display.ReplConst(F.col, F.X + F.left, F.Y, F.W - F.left, curY - dsr - F.Y, Display.replace);
+          Display.ReplConst(FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, curY - dsr - F.Y, Display.replace);
           botY := F.Y + F.bot + dsr;
           org := org + L.len; curY := curY - lsp;
           Texts.OpenReader(R, F.text, org); Texts.Read(R, nextCh);
@@ -235,7 +246,7 @@
           END;
           L.next := F.trailer; UpdateMark(F)
         ELSE Mark(F, FALSE);
-          Display.ReplConst(F.col, F.X + F.left, F.Y, F.W - F.left, F.H, Display.replace);
+          Display.ReplConst(FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, F.H, Display.replace);
           botY := F.Y; F.Y := F.Y + F.H; F.H := 0;
           F.org := pos; F.trailer.next := F.trailer; Extend(F, botY);
           Mark(F, TRUE)
@@ -326,7 +337,7 @@
   PROCEDURE FlipCaret (F: Frame);
   BEGIN
     IF (F.carloc.x < F.W) & (F.carloc.y >= 10) & (F.carloc.x + 12 < F.W) THEN
-      Display.CopyPattern(Display.white, Display.hook, F.X + F.carloc.x, F.Y + F.carloc.y - 10, Display.invert)
+      Display.CopyPattern(Oberon.CursorColor, Display.hook, F.X + F.carloc.x, F.Y + F.carloc.y - 10, Display.invert)
     END
   END FlipCaret;
 
@@ -355,15 +366,15 @@
   PROCEDURE FlipSelection (F: Frame; VAR beg, end: Location);
     VAR L: Line; Y: INTEGER;
   BEGIN L := beg.lin; Y := F.Y + beg.y - 2;
-    IF L = end.lin THEN ReplConst(Display.white, F, F.X + beg.x, Y, end.x - beg.x, selH, Display.invert)
+    IF L = end.lin THEN ReplConst(Oberon.SelectionColor, F, F.X + beg.x, Y, end.x - beg.x, selH, Display.invert)
     ELSE
-      ReplConst(Display.white, F, F.X + beg.x, Y, F.left + L.wid - beg.x, selH, Display.invert);
+      ReplConst(Oberon.SelectionColor, F, F.X + beg.x, Y, F.left + L.wid - beg.x, selH, Display.invert);
       L := L.next; Y := Y - lsp;
       WHILE L # end.lin DO
-        ReplConst(Display.white, F, F.X + F.left, Y, L.wid, selH, Display.invert);
+        ReplConst(Oberon.SelectionColor, F, F.X + F.left, Y, L.wid, selH, Display.invert);
         L := L.next; Y := Y - lsp
       END;
-      ReplConst(Display.white, F, F.X + F.left, Y, end.x - F.left, selH, Display.invert)
+      ReplConst(Oberon.SelectionColor, F, F.X + F.left, Y, end.x - F.left, selH, Display.invert)
     END
   END FlipSelection;
 
@@ -412,19 +423,19 @@
   BEGIN
     IF F.trailer.next # F.trailer THEN
       LocateLine(F, Y - F.Y, old);
-      ReplConst(Display.white, F, F.X + F.left, F.Y + old.y - dsr, old.lin.wid, 2, Display.invert);
+      ReplConst(Oberon.UnderlineColor, F, F.X + F.left, F.Y + old.y - dsr, old.lin.wid, 2, Display.invert);
       keysum := {};
       REPEAT Input.Mouse(keys, X, Y);
         keysum := keysum + keys;
         Oberon.DrawMouse(ScrollMarker, X, Y);
         LocateLine(F, Y - F.Y, new);
         IF new.org # old.org THEN
-          ReplConst(Display.white, F, F.X + F.left, F.Y + old.y - dsr, old.lin.wid, 2, Display.invert);
-          ReplConst(Display.white, F, F.X + F.left, F.Y + new.y - dsr, new.lin.wid, 2, Display.invert);
+          ReplConst(Oberon.UnderlineColor, F, F.X + F.left, F.Y + old.y - dsr, old.lin.wid, 2, Display.invert);
+          ReplConst(Oberon.UnderlineColor, F, F.X + F.left, F.Y + new.y - dsr, new.lin.wid, 2, Display.invert);
           old := new
         END
        UNTIL keys = {};
-       ReplConst(Display.white, F, F.X + F.left, F.Y + new.y - dsr, new.lin.wid, 2, Display.invert);
+       ReplConst(Oberon.UnderlineColor, F, F.X + F.left, F.Y + new.y - dsr, new.lin.wid, 2, Display.invert);
        org := new.org
     ELSE org := 0   (*<----*)
     END
@@ -435,19 +446,19 @@
   BEGIN
     IF F.trailer.next # F.trailer THEN
       LocateString(F, X - F.X, Y - F.Y, old);
-      ReplConst(Display.white, F, F.X + old.x, F.Y + old.y - dsr, old.dx, 2, Display.invert);
+      ReplConst(Oberon.UnderlineColor, F, F.X + old.x, F.Y + old.y - dsr, old.dx, 2, Display.invert);
       keysum := {};
       REPEAT
         Input.Mouse(keys, X, Y); keysum := keysum + keys;
         Oberon.DrawMouseArrow(X, Y);
         LocateString(F, X - F.X, Y - F.Y, new);
         IF new.pos # old.pos THEN
-          ReplConst(Display.white, F, F.X + old.x, F.Y + old.y - dsr, old.dx, 2, Display.invert);
-          ReplConst(Display.white, F, F.X + new.x, F.Y + new.y - dsr, new.dx, 2, Display.invert);
+          ReplConst(Oberon.UnderlineColor, F, F.X + old.x, F.Y + old.y - dsr, old.dx, 2, Display.invert);
+          ReplConst(Oberon.UnderlineColor, F, F.X + new.x, F.Y + new.y - dsr, new.dx, 2, Display.invert);
           old := new
         END
       UNTIL keys = {};
-      ReplConst(Display.white, F, F.X + new.x, F.Y + new.y - dsr, new.dx, 2, Display.invert);
+      ReplConst(Oberon.UnderlineColor, F, F.X + new.x, F.Y + new.y - dsr, new.dx, 2, Display.invert);
       pos := new.pos
     ELSE pos := 0  (*<----*)
     END
@@ -466,11 +477,11 @@
       IF L # F.trailer THEN
         Texts.OpenReader(R, F.text, org); Texts.Read(R, nextCh);
         len := beg - org; wid := Width(R, len);
-        ReplConst(F.col, F, F.X + F.left + wid, curY - dsr, L.wid - wid, lsp, Display.replace);
+        ReplConst(FrameColor(F.col), F, F.X + F.left + wid, curY - dsr, L.wid - wid, lsp, Display.replace);
         DisplayLine(F, L, R, F.X + F.left + wid, curY, len);
         org := org + L.len; L := L.next; curY := curY - lsp;
         WHILE (L # F.trailer) & (org <= end) DO
-          Display.ReplConst(F.col, F.X + F.left, curY - dsr, F.W - F.left, lsp, Display.replace);
+          Display.ReplConst(FrameColor(F.col), F.X + F.left, curY - dsr, F.W - F.left, lsp, Display.replace);
           DisplayLine(F, L, R, F.X + F.left, curY, 0);
           org := org + L.len; L := L.next; curY := curY - lsp
         END
@@ -499,7 +510,7 @@
         Y0 := curY; L0 := L.next;
         WHILE (org <= end) & (curY >= botY) DO
           NEW(l);
-          Display.ReplConst(F.col, F.X + F.left, curY - dsr, F.W - F.left, lsp, Display.replace);
+          Display.ReplConst(FrameColor(F.col), F.X + F.left, curY - dsr, F.W - F.left, lsp, Display.replace);
           DisplayLine(F, l, R, F.X + F.left, curY, 0);
           L.next := l; L := l;
           org := org + L.len; curY := curY - lsp
@@ -519,7 +530,7 @@
           END;
           curY := Y1; L := L0;
           WHILE curY # Y2 DO
-            Display.ReplConst(F.col, F.X + F.left, curY - dsr, F.W - F.left, lsp, Display.replace);
+            Display.ReplConst(FrameColor(F.col), F.X + F.left, curY - dsr, F.W - F.left, lsp, Display.replace);
             DisplayLine(F, L, R, F.X + F.left, curY, 0);
             L := L.next; curY := curY - lsp
           END
@@ -552,7 +563,7 @@
         Y1 := curY;
         Texts.OpenReader(R, F.text, org0); Texts.Read(R, nextCh);
         len := beg - org0; wid := Width(R, len);
-        ReplConst (F.col, F, F.X + F.left + wid, Y0 - dsr, L0.wid - wid, lsp, Display.replace);
+        ReplConst (FrameColor(F.col), F, F.X + F.left + wid, Y0 - dsr, L0.wid - wid, lsp, Display.replace);
         DisplayLine(F, L0, R, F.X + F.left + wid, Y0, len);
         Y0 := Y0 - lsp;
         IF L # L0.next THEN
@@ -564,7 +575,7 @@
           Display.CopyBlock(F.X + F.left, curY + lsp - dsr, F.W - F.left, Y1 - curY,
               F.X + F.left, curY + lsp - dsr + (Y0 - Y1), 0);
           curY := curY + (Y0 - Y1);
-          Display.ReplConst (F.col, F.X + F.left, F.Y, F.W - F.left, curY + lsp - (F.Y + dsr), Display.replace);
+          Display.ReplConst (FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, curY + lsp - (F.Y + dsr), Display.replace);
           Texts.OpenReader(R, F.text, org); Texts.Read(R, nextCh);
           WHILE ~L.eot & (curY >= botY) DO
             NEW(l);
@@ -832,13 +843,13 @@
   PROCEDURE NewMenu* (name, commands: ARRAY OF CHAR): Frame;
     VAR F: Frame; T: Texts.Text;
   BEGIN NEW(F); T := Menu(name, commands);
-    Open(F, Handle, T, 0, Display.white, left DIV 4, 0, 0, 0, lsp); RETURN F
+    Open(F, Handle, T, 0, -2, left DIV 4, 0, 0, 0, lsp); RETURN F
   END NewMenu;
 
   PROCEDURE NewText* (text: Texts.Text; pos: LONGINT): Frame;
     VAR F: Frame;
   BEGIN NEW(F);
-    Open(F, Handle, text, pos, Display.black, left, right, top, bot, lsp); RETURN F
+    Open(F, Handle, text, pos, -1, left, right, top, bot, lsp); RETURN F
   END NewText;
 
 BEGIN NEW(TBuf); NEW(DelBuf);
--- 1/System.Mod.txt
+++ 2/System.Mod.txt
@@ -305,6 +305,32 @@
     Texts.WriteString(W, "  Tasks"); Texts.WriteInt(W, Oberon.NofTasks, 4); EndLine
   END Watch;
 
+  PROCEDURE SetColorTheme*;
+    VAR S: Texts.Scanner;
+      doit: BOOLEAN;
+      mix: BOOLEAN; fc, bc, mbc, tbc, smc, sbc, cc, cmc, sc, uc: INTEGER;
+  BEGIN GetArg(S);
+    IF (S.class = Texts.Char) & (S.c = "*") THEN mix := TRUE; Texts.Scan(S) ELSE mix := FALSE END;
+    IF S.class = Texts.Int THEN fc := S.i; Texts.Scan(S) ELSE fc := Display.white END;
+    IF S.class = Texts.Int THEN bc := S.i; Texts.Scan(S) ELSE bc := Display.black END;
+    IF S.class = Texts.Int THEN mbc := S.i; Texts.Scan(S) ELSE mbc := fc END;
+    IF S.class = Texts.Int THEN tbc := S.i; Texts.Scan(S) ELSE tbc := bc END;
+    IF S.class = Texts.Int THEN smc := S.i; Texts.Scan(S) ELSE smc := fc END;
+    IF S.class = Texts.Int THEN sbc := S.i; Texts.Scan(S) ELSE sbc := fc END;
+    IF S.class = Texts.Int THEN cc := S.i; Texts.Scan(S); ELSE cc := Display.white END;
+    IF S.class = Texts.Int THEN cmc := S.i; Texts.Scan(S) ELSE cmc := cc END;
+    IF S.class = Texts.Int THEN sc := S.i; Texts.Scan(S) ELSE sc := cc END;
+    IF S.class = Texts.Int THEN uc := S.i; Texts.Scan(S) ELSE uc := cc END;
+    IF (S.class = Texts.Char) & (S.c = "@") THEN
+      Texts.Scan(S); doit := (S.class = Texts.Int) & (S.i = Display.Depth)
+    ELSE
+      doit := TRUE
+    END;
+    IF doit THEN
+      Oberon.SetColorTheme(mix, fc, bc, mbc, tbc, smc, sbc, cc, cmc, sc, uc)
+    END
+  END SetColorTheme;
+
   PROCEDURE ShowModules*;
     VAR T: Texts.Text;
       V: Viewers.Viewer;
