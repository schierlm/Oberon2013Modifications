--- 1/TextFramesU.Mod.txt
+++ 2/TextFramesU.Mod.txt
@@ -67,6 +67,14 @@
     END
   END ReplConst;
 
+  PROCEDURE FrameColor(col: INTEGER): INTEGER;
+  BEGIN
+    IF col = -1 THEN col := Oberon.TextBackgroundColor
+    ELSIF col = -2 THEN col := Oberon.MenuBackgroundColor
+    END
+  RETURN col
+  END FrameColor;
+
   PROCEDURE FlipSM(X, Y: INTEGER);
     VAR DW, DH, CL: INTEGER;
   BEGIN DW := Display.Width; DH := Display.Height; CL := DW;
@@ -76,23 +84,23 @@
       IF X < CL + 3 THEN X := CL + 4 ELSIF X > CL + DW - 4 THEN X := CL + DW - 4 END
     END ;
     IF Y < 7 THEN Y := 7 ELSIF Y > DH - 7 THEN Y := DH - 7 END;
-    Display.CopyPattern(Display.white, Display.updown, X-4, Y-7, Display.invert)
+    Display.CopyPattern(Oberon.CursorColor, Display.updown, X-4, Y-7, Display.invert)
   END FlipSM;
 
   PROCEDURE UpdateMark (F: Frame);  (*in scroll bar*)
     VAR oldH: INTEGER;
   BEGIN oldH := F.markH; F.markH := F.org * F.H DIV (F.text.len + 1);
     IF F.hasMark & (F.left >= barW) & (F.markH # oldH) THEN
-      Display.ReplConst(Display.white, F.X + 1, F.Y + F.H - 1 - oldH, markW, 1, Display.invert);
-      Display.ReplConst(Display.white, F.X + 1, F.Y + F.H - 1 - F.markH, markW, 1, Display.invert)
+      Display.ReplConst(Oberon.ScrollMarkColor, F.X + 1, F.Y + F.H - 1 - oldH, markW, 1, Display.invert);
+      Display.ReplConst(Oberon.ScrollMarkColor, F.X + 1, F.Y + F.H - 1 - F.markH, markW, 1, Display.invert)
     END
   END UpdateMark;
 
   PROCEDURE SetChangeMark (F: Frame; on: BOOLEAN);  (*in corner*)
   BEGIN
     IF F.H > menuH THEN
-      IF on THEN  Display.CopyPattern(Display.white, Display.block, F.X+F.W-12, F.Y+F.H-12, Display.paint)
-      ELSE Display.ReplConst(F.col, F.X+F.W-12, F.Y+F.H-12, 8, 8, Display.replace)
+      IF on THEN  Display.CopyPattern(Oberon.ChangeMarkColor, Display.block, F.X+F.W-12, F.Y+F.H-12, Display.paint)
+      ELSE Display.ReplConst(FrameColor(F.col), F.X+F.W-12, F.Y+F.H-12, 8, 8, Display.replace)
       END
     END
   END SetChangeMark;
@@ -128,6 +136,9 @@
       IF -R.fnt.minY < dsr THEN dy := dsr + R.fnt.minY ELSE dy := 0 END;
       IF (X + x + w <= NX) & (h # 0) THEN
         Display.CopyPattern(R.col, patadr, X + x, Y + y - dy, Display.invert)
+        ;IF Oberon.MixTextColors & (R.col # 0) THEN
+          Display.CopyPattern(FrameColor(F.col), patadr, X + x, Y + y - dy, Display.invert)
+        END
       END;
       X := X + dx; INC(len, TextsU.UnicodeWidth(nextCodepoint)); TextsU.ReadUnicode(R, nextCodepoint)
     END;
@@ -150,16 +161,16 @@
   PROCEDURE Mark* (F: Frame; on: BOOLEAN);
   BEGIN
     IF (F.H > 0) & (F.left >= barW) & ((F.hasMark & ~on) OR (~F.hasMark & on)) THEN
-      Display.ReplConst(Display.white, F.X + 1, F.Y + F.H - 1 - F.markH, markW, 1, Display.invert)
+      Display.ReplConst(Oberon.ScrollMarkColor, F.X + 1, F.Y + F.H - 1 - F.markH, markW, 1, Display.invert)
     END;
     F.hasMark := on
   END Mark;
 
   PROCEDURE Restore* (F: Frame);
     VAR R: Texts.Reader; L, l: Line; curY, botY: INTEGER;
-  BEGIN  Display.ReplConst(F.col, F.X, F.Y, F.W, F.H, Display.replace);
+  BEGIN  Display.ReplConst(FrameColor(F.col), F.X, F.Y, F.W, F.H, Display.replace);
     IF F.left >= barW THEN
-      Display.ReplConst(Display.white, F.X + barW - 1, F.Y, 1, F.H, Display.invert)
+      Display.ReplConst(Oberon.ScrollBarColor, F.X + barW - 1, F.Y, 1, F.H, Display.invert)
     END;
     Validate(F.text, F.org);
     botY := F.Y + F.bot + dsr;
@@ -185,9 +196,9 @@
   PROCEDURE Extend* (F: Frame; newY: INTEGER);
     VAR R: Texts.Reader; L, l: Line;
     org: LONGINT; curY, botY: INTEGER;
-  BEGIN Display.ReplConst(F.col, F.X, newY, F.W, F.Y - newY, Display.replace);
+  BEGIN Display.ReplConst(FrameColor(F.col), F.X, newY, F.W, F.Y - newY, Display.replace);
     IF F.left >= barW THEN
-      Display.ReplConst(Display.white, F.X + barW - 1, newY, 1, F.Y - newY, Display.invert)
+      Display.ReplConst(Oberon.ScrollBarColor, F.X + barW - 1, newY, 1, F.Y - newY, Display.invert)
     END;
     botY := F.Y + F.bot + dsr; F.H := F.H + F.Y - newY; F.Y := newY;
     IF F.trailer.next = F.trailer THEN Validate(F.text, F.org) END;
@@ -220,7 +231,7 @@
     END;
     L.next := F.trailer;
     IF curY + asr > F.Y THEN
-      Display.ReplConst(F.col, F.X + F.left, F.Y, F.W - F.left, curY + asr - F.Y, Display.replace)
+      Display.ReplConst(FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, curY + asr - F.Y, Display.replace)
     END;
     F.markH := F.org * F.H DIV (F.text.len + 1); Mark(F, TRUE)
   END Reduce;
@@ -232,7 +243,7 @@
     IF F.trailer.next # F.trailer THEN
       Validate(F.text, pos);
       IF pos < F.org THEN Mark(F, FALSE);
-        Display.ReplConst(F.col, F.X + F.left, F.Y, F.W - F.left, F.H, Display.replace);
+        Display.ReplConst(FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, F.H, Display.replace);
         botY := F.Y; F.Y := F.Y + F.H; F.H := 0;
         F.org := pos; F.trailer.next := F.trailer; Extend(F, botY); Mark(F, TRUE)
       ELSIF pos > F.org THEN
@@ -248,7 +259,7 @@
           Display.CopyBlock (F.X + F.left, curY - dsr - L.lsp, F.W - F.left, Y0 + asr + L.lsp - (curY - dsr),
               F.X + F.left, curY - dsr + F.Y + F.H - F.top - asr - L.lsp - Y0, 0);
           curY := curY + F.Y + F.H - F.top - asr - L.lsp - Y0;
-          Display.ReplConst(F.col, F.X + F.left, F.Y, F.W - F.left, curY - dsr - F.Y, Display.replace);
+          Display.ReplConst(FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, curY - dsr - F.Y, Display.replace);
           botY := F.Y + F.bot + dsr;
           org := org + L.len;
           Texts.OpenReader(R, F.text, org); TextsU.ReadUnicode(R, nextCodepoint);
@@ -263,7 +274,7 @@
           END;
           L.next := F.trailer; UpdateMark(F)
         ELSE Mark(F, FALSE);
-          Display.ReplConst(F.col, F.X + F.left, F.Y, F.W - F.left, F.H, Display.replace);
+          Display.ReplConst(FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, F.H, Display.replace);
           botY := F.Y; F.Y := F.Y + F.H; F.H := 0;
           F.org := pos; F.trailer.next := F.trailer; Extend(F, botY);
           Mark(F, TRUE)
@@ -354,7 +365,7 @@
   PROCEDURE FlipCaret (F: Frame);
   BEGIN
     IF (F.carloc.x < F.W) & (F.carloc.y >= 10) & (F.carloc.x + 12 < F.W) THEN
-      Display.CopyPattern(Display.white, Display.hook, F.X + F.carloc.x, F.Y + F.carloc.y - 10, Display.invert)
+      Display.CopyPattern(Oberon.CursorColor, Display.hook, F.X + F.carloc.x, F.Y + F.carloc.y - 10, Display.invert)
     END
   END FlipCaret;
 
@@ -383,15 +394,15 @@
   PROCEDURE FlipSelection (F: Frame; VAR beg, end: Location);
     VAR L: Line; Y: INTEGER;
   BEGIN L := beg.lin; Y := F.Y + beg.y - 2;
-    IF L = end.lin THEN ReplConst(Display.white, F, F.X + beg.x, Y, end.x - beg.x, L.lsp, Display.invert)
+    IF L = end.lin THEN ReplConst(Oberon.SelectionColor, F, F.X + beg.x, Y, end.x - beg.x, L.lsp, Display.invert)
     ELSE
-      ReplConst(Display.white, F, F.X + beg.x, Y, F.left + L.wid - beg.x, L.lsp, Display.invert);
+      ReplConst(Oberon.SelectionColor, F, F.X + beg.x, Y, F.left + L.wid - beg.x, L.lsp, Display.invert);
       Y := Y - L.lsp; L := L.next;
       WHILE L # end.lin DO
-        ReplConst(Display.white, F, F.X + F.left, Y, L.wid, L.lsp, Display.invert);
+        ReplConst(Oberon.SelectionColor, F, F.X + F.left, Y, L.wid, L.lsp, Display.invert);
         Y := Y - L.lsp; L := L.next
       END;
-      ReplConst(Display.white, F, F.X + F.left, Y, end.x - F.left, L.lsp, Display.invert)
+      ReplConst(Oberon.SelectionColor, F, F.X + F.left, Y, end.x - F.left, L.lsp, Display.invert)
     END
   END FlipSelection;
 
@@ -440,19 +451,19 @@
   BEGIN
     IF F.trailer.next # F.trailer THEN
       LocateLine(F, Y - F.Y, old);
-      ReplConst(Display.white, F, F.X + F.left, F.Y + old.y - dsr, old.lin.wid, 2, Display.invert);
+      ReplConst(Oberon.UnderlineColor, F, F.X + F.left, F.Y + old.y - dsr, old.lin.wid, 2, Display.invert);
       keysum := {};
       REPEAT Input.Mouse(keys, X, Y);
         keysum := keysum + keys;
         Oberon.DrawMouse(ScrollMarker, X, Y);
         LocateLine(F, Y - F.Y, new);
         IF new.org # old.org THEN
-          ReplConst(Display.white, F, F.X + F.left, F.Y + old.y - dsr, old.lin.wid, 2, Display.invert);
-          ReplConst(Display.white, F, F.X + F.left, F.Y + new.y - dsr, new.lin.wid, 2, Display.invert);
+          ReplConst(Oberon.UnderlineColor, F, F.X + F.left, F.Y + old.y - dsr, old.lin.wid, 2, Display.invert);
+          ReplConst(Oberon.UnderlineColor, F, F.X + F.left, F.Y + new.y - dsr, new.lin.wid, 2, Display.invert);
           old := new
         END
        UNTIL keys = {};
-       ReplConst(Display.white, F, F.X + F.left, F.Y + new.y - dsr, new.lin.wid, 2, Display.invert);
+       ReplConst(Oberon.UnderlineColor, F, F.X + F.left, F.Y + new.y - dsr, new.lin.wid, 2, Display.invert);
        org := new.org
     ELSE org := 0   (*<----*)
     END
@@ -463,19 +474,19 @@
   BEGIN
     IF F.trailer.next # F.trailer THEN
       LocateString(F, X - F.X, Y - F.Y, old);
-      ReplConst(Display.white, F, F.X + old.x, F.Y + old.y - dsr, old.dx, 2, Display.invert);
+      ReplConst(Oberon.UnderlineColor, F, F.X + old.x, F.Y + old.y - dsr, old.dx, 2, Display.invert);
       keysum := {};
       REPEAT
         Input.Mouse(keys, X, Y); keysum := keysum + keys;
         Oberon.DrawMouseArrow(X, Y);
         LocateString(F, X - F.X, Y - F.Y, new);
         IF new.pos # old.pos THEN
-          ReplConst(Display.white, F, F.X + old.x, F.Y + old.y - dsr, old.dx, 2, Display.invert);
-          ReplConst(Display.white, F, F.X + new.x, F.Y + new.y - dsr, new.dx, 2, Display.invert);
+          ReplConst(Oberon.UnderlineColor, F, F.X + old.x, F.Y + old.y - dsr, old.dx, 2, Display.invert);
+          ReplConst(Oberon.UnderlineColor, F, F.X + new.x, F.Y + new.y - dsr, new.dx, 2, Display.invert);
           old := new
         END
       UNTIL keys = {};
-      ReplConst(Display.white, F, F.X + new.x, F.Y + new.y - dsr, new.dx, 2, Display.invert);
+      ReplConst(Oberon.UnderlineColor, F, F.X + new.x, F.Y + new.y - dsr, new.dx, 2, Display.invert);
       pos := new.pos
     ELSE pos := 0  (*<----*)
     END
@@ -496,17 +507,17 @@
         Texts.OpenReader(R, F.text, org); TextsU.ReadUnicode(R, nextCodepoint);
         ll := L.lsp; curY := curY + L.lsp; UpdateLineHeight(L, R, F.text); curY := curY - L.lsp;
         IF ll # L.lsp THEN
-          hchg := TRUE; len := 0; wid := 0; ReplConst(F.col, F, F.X + F.left + L.wid, curY - dsr, F.W - F.left - L.wid, L.lsp, Display.replace)
+          hchg := TRUE; len := 0; wid := 0; ReplConst(FrameColor(F.col), F, F.X + F.left + L.wid, curY - dsr, F.W - F.left - L.wid, L.lsp, Display.replace)
         ELSE
           hchg := FALSE; len := beg - org; wid := Width(R, len)
         END;
-        ReplConst(F.col, F, F.X + F.left + wid, curY - dsr, L.wid - wid, L.lsp, Display.replace);
+        ReplConst(FrameColor(F.col), F, F.X + F.left + wid, curY - dsr, L.wid - wid, L.lsp, Display.replace);
         DisplayLine(F, L, R, F.X + F.left + wid, curY, len);
         org := org + L.len; L := L.next;
         WHILE (L # F.trailer) & (org <= end) DO
           ll := L.lsp; UpdateLineHeight(L, R, F.text); curY := curY - L.lsp;
           IF ll # L.lsp THEN hchg := TRUE END;
-          Display.ReplConst(F.col, F.X + F.left, curY - dsr, F.W - F.left, L.lsp, Display.replace);
+          Display.ReplConst(FrameColor(F.col), F.X + F.left, curY - dsr, F.W - F.left, L.lsp, Display.replace);
           DisplayLine(F, L, R, F.X + F.left, curY, 0);
           org := org + L.len; L := L.next
         END;
@@ -531,11 +542,11 @@
         Texts.OpenReader(R, F.text, org); TextsU.ReadUnicode(R, nextCodepoint);
         Y1 := curY; curY := curY + L.lsp; UpdateLineHeight(L, R, F.text); curY := curY - L.lsp;
         IF Y1 # curY THEN
-          len := 0; wid := 0; ReplConst(F.col, F, F.X + F.left + L.wid, curY - dsr, F.W - F.left - L.wid, L.lsp, Display.replace)
+          len := 0; wid := 0; ReplConst(FrameColor(F.col), F, F.X + F.left + L.wid, curY - dsr, F.W - F.left - L.wid, L.lsp, Display.replace)
         ELSE
           len := beg - org; wid := Width(R, len)
         END;
-        ReplConst (F.col, F, F.X + F.left + wid, curY - dsr, L.wid - wid, L.lsp, Display.replace);
+        ReplConst (FrameColor(F.col), F, F.X + F.left + wid, curY - dsr, L.wid - wid, L.lsp, Display.replace);
         DisplayLine(F, L, R, F.X + F.left + wid, curY, len);
         org := org + L.len;
         Y0 := curY; L0 := L.next;
@@ -544,7 +555,7 @@
           UpdateLineHeight(l, R, F.text);
           curY := curY - l.lsp;
           IF curY >= botY THEN
-            Display.ReplConst(F.col, F.X + F.left, curY - dsr, F.W - F.left, l.lsp, Display.replace);
+            Display.ReplConst(FrameColor(F.col), F.X + F.left, curY - dsr, F.W - F.left, l.lsp, Display.replace);
             DisplayLine(F, l, R, F.X + F.left, curY, 0);
             L.next := l; L := l;
             org := org + L.len
@@ -566,7 +577,7 @@
           curY := Y1; L := L0;
           WHILE curY > Y2 DO
             curY := curY - L.lsp;
-            Display.ReplConst(F.col, F.X + F.left, curY - dsr, F.W - F.left, L.lsp, Display.replace);
+            Display.ReplConst(FrameColor(F.col), F.X + F.left, curY - dsr, F.W - F.left, L.lsp, Display.replace);
             DisplayLine(F, L, R, F.X + F.left, curY, 0);
             L := L.next
           END
@@ -603,7 +614,7 @@
         ELSE
           len := 0; wid := 0
         END;
-        ReplConst (F.col, F, F.X + F.left + wid, Y0 - dsr, L0.wid - wid, L0.lsp, Display.replace);
+        ReplConst (FrameColor(F.col), F, F.X + F.left + wid, Y0 - dsr, L0.wid - wid, L0.lsp, Display.replace);
         DisplayLine(F, L0, R, F.X + F.left + wid, Y0, len);
         IF (L # L0.next) OR (Y1 # Y0) THEN
           Y0 := Y0 - L.lsp;
@@ -616,7 +627,7 @@
           Display.CopyBlock(F.X + F.left, curY + L0.next.lsp - dsr, F.W - F.left, Y1 - curY,
               F.X + F.left, curY + L0.next.lsp - dsr + (Y0 - Y1), 0);
           curY := curY + (Y0 - Y1);
-          Display.ReplConst (F.col, F.X + F.left, F.Y, F.W - F.left, curY + L0.next.lsp - (F.Y + dsr), Display.replace);
+          Display.ReplConst (FrameColor(F.col), F.X + F.left, F.Y, F.W - F.left, curY + L0.next.lsp - (F.Y + dsr), Display.replace);
           Texts.OpenReader(R, F.text, org); TextsU.ReadUnicode(R, nextCodepoint); curY := curY + L0.next.lsp;
           WHILE ~L.eot & (curY >= botY) DO
             NEW(l);
@@ -893,13 +904,13 @@
   PROCEDURE NewMenu* (name, commands: ARRAY OF CHAR): Frame;
     VAR F: Frame; T: Texts.Text;
   BEGIN NEW(F); T := Menu(name, commands);
-    Open(F, Handle, T, 0, Display.white, left DIV 4, 0, 0, 0, lsp); RETURN F
+    Open(F, Handle, T, 0, -2, left DIV 4, 0, 0, 0, lsp); RETURN F
   END NewMenu;
 
   PROCEDURE NewText* (text: Texts.Text; pos: LONGINT): Frame;
     VAR F: Frame;
   BEGIN NEW(F);
-    Open(F, Handle, text, pos, Display.black, left, right, top, bot, lsp); RETURN F
+    Open(F, Handle, text, pos, -1, left, right, top, bot, lsp); RETURN F
   END NewText;
 
 BEGIN NEW(TBuf); NEW(DelBuf);
