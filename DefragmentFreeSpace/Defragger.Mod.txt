MODULE Defragger;
  IMPORT SYSTEM, Kernel, FileDir, DefragFiles, Display, Fonts;

  CONST FileInfoPerSector = 25;

  TYPE
    FileInfoSector = RECORD
      names: ARRAY FileInfoPerSector OF FileDir.FileName;
      count, firstSector, sector, filler1, filler2, filler3: INTEGER;
      lengths: ARRAY FileInfoPerSector OF INTEGER;
      dateStamps: ARRAY FileInfoPerSector OF INTEGER;
    END;

    FinishedHook = PROCEDURE;

  VAR fileInfo: FileInfoSector;
    preserveDates, cleanDisk: BOOLEAN;
    finishedHook: FinishedHook;

  PROCEDURE SetDate*(adr, date: INTEGER);
    VAR hp: FileDir.FileHeader;
  BEGIN
    Kernel.GetSector(adr, hp);
    hp.date := date;
    Kernel.PutSector(adr, hp)
  END SetDate;

  PROCEDURE LastUsedSector(): INTEGER;
  VAR
    n, hint, sec: INTEGER;
  BEGIN
    n := Kernel.NofSectors - 1; hint := 64 * 29;
    WHILE n > 0 DO
      Kernel.AllocSector(hint-29, sec); Kernel.FreeSector(sec);
      IF hint # sec THEN DEC(n) END;
      IF n > 0 THEN INC(hint, 29) END
    END;
  RETURN hint
  END LastUsedSector;

  PROCEDURE TrimAllSectorsAfter(sec: INTEGER);
  VAR i: INTEGER; magicSector: Kernel.Sector;
  BEGIN
    magicSector[0] := ORD("!"); magicSector[504] := ORD("!");
    magicSector[1] := ORD("!"); magicSector[505] := ORD("!");
    magicSector[2] := ORD("T"); magicSector[506] := ORD("T");
    magicSector[3] := ORD("R"); magicSector[507] := ORD("R");
    magicSector[4] := ORD("I"); magicSector[508] := ORD("I");
    magicSector[5] := ORD("M"); magicSector[509] := ORD("M");
    magicSector[6] := ORD("!"); magicSector[510] := ORD("!");
    magicSector[7] := ORD("!"); magicSector[511] := ORD("!");
    FOR i := 8 TO 503 DO magicSector[i] := ORD("-") END;
    FOR i := 0 TO 511 DO magicSector[512+i] := magicSector[i] END;
    Kernel.PutSector(sec+29, magicSector);
  END TrimAllSectorsAfter;

  PROCEDURE CleanDirPages(page: INTEGER);
    VAR i: INTEGER;
      EmptyEntry: FileDir.DirEntry;
      a: FileDir.DirPage;
  BEGIN
    Kernel.GetSector(page, a); ASSERT(a.mark = FileDir.DirMark);
    FOR i := 0 TO FileDir.FnLength - 1 DO EmptyEntry.name[i] := 0X END;
    EmptyEntry.adr := 0; EmptyEntry.p := 0;
    FOR i := a.m TO FileDir.DirPgSize - 1 DO a.e[i] := EmptyEntry END;
    Kernel.PutSector(page, a);
    IF a.p0 # 0 THEN CleanDirPages(a.p0) END;
    FOR i := 0 TO a.m - 1 DO
      IF a.e[i].p # 0 THEN CleanDirPages(a.e[i].p) END
    END
  END CleanDirPages;

  PROCEDURE DrawText(text: ARRAY OF CHAR; x, y: INTEGER);
  VAR
    dx, xx, yy, t1, t2, patAdr, i: INTEGER;
  BEGIN
    i := 0;
    WHILE text[i] # 0X DO
      Fonts.GetPat(Fonts.Default, text[i], dx, xx, yy, t1, t2, patAdr);
      Display.CopyPattern(Display.white, patAdr, x + xx, y + yy, Display.replace);
      INC(x, dx);
      INC(i)
    END
  END DrawText;

  PROCEDURE ShowRestartMessage;
  BEGIN
    Display.ReplConst(Display.white, 20, 20, 170, 30, Display.replace);
    Display.ReplConst(Display.black, 22, 22, 166, 26, Display.replace);
    DrawText("Defrag finished. Please restart.", 30, 30);
    Kernel.Install(SYSTEM.ADR(ShowRestartMessage), 0);
    IF finishedHook # NIL THEN finishedHook END;
    REPEAT SYSTEM.PUT(-64, Kernel.Time() + 1000) UNTIL FALSE
  END ShowRestartMessage;

  PROCEDURE Trim*;
  BEGIN
    IF cleanDisk THEN CleanDirPages(FileDir.DirRootAdr) END;
    TrimAllSectorsAfter(LastUsedSector())
  END Trim;

  PROCEDURE EnumAll(name: FileDir.FileName; adr: LONGINT; VAR cont: BOOLEAN);
    VAR len, date: INTEGER;
  BEGIN
    DefragFiles.Old(name); len := DefragFiles.Length(); date := DefragFiles.Date(); DefragFiles.Close();
    fileInfo.names[fileInfo.count] := name;
    fileInfo.lengths[fileInfo.count] := len;
    fileInfo.dateStamps[fileInfo.count] := date;
    INC(fileInfo.count);
    IF fileInfo.count = FileInfoPerSector THEN
      Kernel.PutSector(fileInfo.sector, fileInfo);
      INC(fileInfo.sector, 29);
      fileInfo.count := 0
    END
  END EnumAll;

  PROCEDURE SetFinishedHook*(hook: FinishedHook);
  BEGIN finishedHook := hook
  END SetFinishedHook;

  PROCEDURE SetPreserveDates*;
  BEGIN preserveDates := TRUE
  END SetPreserveDates;

  PROCEDURE SetCleanDisk*;
  BEGIN cleanDisk := TRUE
  END SetCleanDisk;

  PROCEDURE Defrag*;
  VAR
    R: DefragFiles.Rider;
    dp: FileDir.DirPage;
    buf: FileDir.DataSector;
    lastUsedSector, currSector, pos, len, fileno, adr: INTEGER;
  BEGIN
    DefragFiles.SetCleanDisk(cleanDisk);
    fileInfo.firstSector := LastUsedSector() + 29; fileInfo.count := 0;
    fileInfo.sector := fileInfo.firstSector;
    FileDir.Enumerate("", EnumAll);
    Kernel.PutSector(fileInfo.sector, fileInfo);
    lastUsedSector := fileInfo.sector;
    currSector := lastUsedSector + 29; fileno := 0; pos := 0;
    Kernel.GetSector(fileInfo.firstSector, fileInfo);
    WHILE fileno < fileInfo.count DO
      DefragFiles.Old(fileInfo.names[fileno]);
      len := 0;
      DefragFiles.SetAtZero(R);
      DefragFiles.ReadByte(R, buf[pos]);
      WHILE ~R.eof DO
        INC(pos); INC(len);
        IF pos = FileDir.SectorSize THEN
          Kernel.PutSector(currSector, buf);
          INC(currSector, 29);
          pos := 0
        END;
        DefragFiles.ReadByte(R, buf[pos]);
      END;
      DefragFiles.Close();
      ASSERT(fileInfo.lengths[fileno] = len);
      INC(fileno);
      IF fileno = FileInfoPerSector THEN
        Kernel.GetSector(fileInfo.sector + 29, fileInfo);
        fileno := 0
      END
    END;
    IF pos # 0 THEN
      WHILE pos < FileDir.SectorSize DO buf[pos] := 0; INC(pos) END;
      Kernel.PutSector(currSector, buf);
    END;
    FOR pos := 0 TO FileDir.SectorSize - 1 DO buf[pos] := 0 END;
    Kernel.PutSector(FileDir.DirRootAdr, buf);
    IF cleanDisk THEN
      currSector := LastUsedSector();
      WHILE currSector >= 64 * 29 DO
        Kernel.PutSector(currSector, buf);
        DEC(currSector, 29)
      END
    END;
    Kernel.GetSector(FileDir.DirRootAdr, dp);
    dp.mark := FileDir.DirMark;
    Kernel.PutSector(FileDir.DirRootAdr, dp);
    Kernel.InitSecMap;
    Kernel.MarkSector(FileDir.DirRootAdr);
    currSector := lastUsedSector + 29; fileno := 0; pos := 0;
    Kernel.GetSector(fileInfo.firstSector, fileInfo);
    Kernel.GetSector(currSector, buf); INC(currSector, 29);
    WHILE fileno < fileInfo.count DO
      len := fileInfo.lengths[fileno];
      DefragFiles.New(fileInfo.names[fileno]);
      DefragFiles.SetAtZero(R);
      WHILE len > 0 DO
        DefragFiles.WriteByte(R, buf[pos]);
        INC(pos); DEC(len);
        IF pos = FileDir.SectorSize THEN
          Kernel.GetSector(currSector, buf); INC(currSector, 29);
          pos := 0;
        END;
      END;
      adr := DefragFiles.Register();
      IF preserveDates THEN SetDate(adr, fileInfo.dateStamps[fileno]) END;
      INC(fileno);
      IF fileno = FileInfoPerSector THEN
        Kernel.GetSector(fileInfo.sector + 29, fileInfo);
        fileno := 0
      END
    END;
    Trim; ShowRestartMessage
  END Defrag;

BEGIN finishedHook := NIL
END Defragger.
