--- EmulatorCore.Mod.txt
+++ EmulatorCore.Mod.txt
@@ -13,6 +13,8 @@
       keyBuffer: ARRAY 16 OF CHAR;
       keyBufferStart, keyBufferEnd, mouseStatus: INTEGER;
       useSerialPort, stopped*, sector0missing: BOOLEAN;
+      hwEnumBuffer: ARRAY 32 OF INTEGER;
+      hwEnumAddr, hwEnumCount: INTEGER;
     END;
 
     EmulatorContinue = POINTER TO EmulatorContinueDesc;
@@ -66,6 +68,9 @@
       ELSE
         val := 0
       END
+    ELSIF (address = EmulatorCPU.IoStart + 60) & (e.hwEnumAddr < e.hwEnumCount) THEN
+        val := e.hwEnumBuffer[e.hwEnumAddr];
+        INC(e.hwEnumAddr)
     ELSE
       val := 0
     END
@@ -119,6 +124,53 @@
           Texts.Append(Oberon.Log, CW.buf)
         END
       END
+    ELSIF address = EmulatorCPU.IoStart + 60 THEN
+      e.hwEnumAddr := 0; e.hwEnumCount := 0;
+      IF val = 0 THEN
+        e.hwEnumBuffer[e.hwEnumCount] := 1; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID("mVid"); INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID("Timr"); INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID("LEDs"); INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID("MsKb"); INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID("vClp"); INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID("vDsk"); INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID("vRTC"); INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID("Rset"); INC(e.hwEnumCount);
+        IF e.useSerialPort THEN
+          e.hwEnumBuffer[e.hwEnumCount] := Kernel.ToHardwareID(""); INC(e.hwEnumCount)
+        END;
+      ELSIF val = Kernel.ToHardwareID("mVid") THEN
+        e.hwEnumBuffer[e.hwEnumCount] := 1; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := 0; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := e.width; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := e.height; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := 128; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := EmulatorCPU.DisplayStart; INC(e.hwEnumCount);
+      ELSIF val = Kernel.ToHardwareID("Rset") THEN
+         e.hwEnumBuffer[e.hwEnumCount] := EmulatorCPU.RomStart; INC(e.hwEnumCount);
+      ELSIF (val = Kernel.ToHardwareID("SPrt")) & e.useSerialPort THEN
+        e.hwEnumBuffer[e.hwEnumCount] := 1; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := -52; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := -56; INC(e.hwEnumCount);
+      ELSIF val = Kernel.ToHardwareID("Timr") THEN
+        e.hwEnumBuffer[e.hwEnumCount] := -64; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := 1; INC(e.hwEnumCount);
+      ELSIF val = Kernel.ToHardwareID("LEDs") THEN
+        e.hwEnumBuffer[e.hwEnumCount] := 8; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := -60; INC(e.hwEnumCount);
+      ELSIF val = Kernel.ToHardwareID("MsKb") THEN
+        e.hwEnumBuffer[e.hwEnumCount] := -40; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := -36; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := 1; INC(e.hwEnumCount);
+      ELSIF val = Kernel.ToHardwareID("vClp") THEN
+        e.hwEnumBuffer[e.hwEnumCount] := -24; INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := -20; INC(e.hwEnumCount);
+      ELSIF val = Kernel.ToHardwareID("vRTC") THEN
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.Time(); INC(e.hwEnumCount);
+        e.hwEnumBuffer[e.hwEnumCount] := Kernel.Clock(); INC(e.hwEnumCount);
+      ELSIF val = Kernel.ToHardwareID("vDsk") THEN
+        e.hwEnumBuffer[e.hwEnumCount] := -28; INC(e.hwEnumCount);
+      END
     ELSE
       val := 0
     END
@@ -192,9 +244,6 @@
         EmulatorCPU.WriteWord(e, EmulatorCPU.DisplayStart, 53697A65H); (* magic value "Size" *)
         EmulatorCPU.WriteWord(e, EmulatorCPU.DisplayStart + 4, e.width);
         EmulatorCPU.WriteWord(e, EmulatorCPU.DisplayStart + 8, e.height);
-        EmulatorCPU.WriteWord(e, 10000H, 54696D65H); (* magic value "Time" *)
-        EmulatorCPU.WriteWord(e, 10004H, Kernel.Time());
-        EmulatorCPU.WriteWord(e, 10008H, Kernel.Clock());
       END;
       Run(e)
     END
